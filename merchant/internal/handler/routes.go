// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	merchant "com.copo/bo_service/merchant/internal/handler/merchant"
	payorder "com.copo/bo_service/merchant/internal/handler/payorder"
	proxypayorder "com.copo/bo_service/merchant/internal/handler/proxypayorder"
	test "com.copo/bo_service/merchant/internal/handler/test"
	withdraworder "com.copo/bo_service/merchant/internal/handler/withdraworder"
	"com.copo/bo_service/merchant/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/pay-order",
				Handler: payorder.PayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-query",
				Handler: payorder.PayQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/internal-pay-order",
				Handler: payorder.InternalPayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-order-channel-bank",
				Handler: payorder.PayOrderChannelBankHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-order-channel-redirect",
				Handler: payorder.PayOrderChannelRedirectHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-order-channel-redirect-va",
				Handler: payorder.PayOrderChannelRedirectVAHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-query-balance",
				Handler: payorder.PayQueryBalanceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-query-subBalance",
				Handler: payorder.PaySubQueryBalanceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-call-back",
				Handler: payorder.PayCallBackHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/test_merchant_pay-call-back",
				Handler: payorder.TestMerchantPayCallBackHandler(serverCtx),
			},
		},
		rest.WithPrefix("/dior/merchant-api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/proxy-order",
				Handler: proxypayorder.ProxyPayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/proxy-query",
				Handler: proxypayorder.ProxyPayQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/proxy-call-back",
				Handler: proxypayorder.ProxyPayCallBackHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/merchant-call-back",
				Handler: proxypayorder.TestMerchantCallBackHandler(serverCtx),
			},
		},
		rest.WithPrefix("/dior/merchant-api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-order",
				Handler: withdraworder.WithdrawApiOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-query",
				Handler: withdraworder.WithdrawApiQueryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-test-callback",
				Handler: withdraworder.WithdrawApiTestCallBackHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-order-by-proxy",
				Handler: withdraworder.WithdrawProxyPayApiOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/withdraw-query-by-proxy",
				Handler: withdraworder.WithdrawProxyPayApiQueryHandler(serverCtx),
			},
		},
		rest.WithPrefix("/dior/merchant-api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/generate-sign",
				Handler: test.GenerateSignHndlerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/pay-order",
				Handler: test.TestPayOrderHndlerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/encryption-param",
				Handler: test.EncryptionParamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/decrypt-param",
				Handler: test.DecryptParamHandler(serverCtx),
			},
		},
		rest.WithPrefix("/dior/test-api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/healthCheck",
				Handler: test.HealthCheckHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/test"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create-merchant-api",
				Handler: merchant.CreateMerchantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/query-merchant-api",
				Handler: merchant.QueryMerchantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/query-channel-by-paytype",
				Handler: merchant.MerchantQueryChannelHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/query-order-statement",
				Handler: merchant.MerchantQueryOrderStatementHandler(serverCtx),
			},
		},
		rest.WithPrefix("/dior/merchant-api"),
	)
}
